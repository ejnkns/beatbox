// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  TutorialVotes     TutorialVote[]
  UploadedTutorials Tutorial[]
  UploadedSounds    BeatboxSound[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BeatboxSound {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  category  CategoryType
  tutorials Tutorial[]
  examples  ExampleVideo[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  User      User?          @relation(fields: [userId], references: [id])
  userId    String?
}

enum CategoryType {
  BASS
  SNARE
  KICK
  WHISTLES
  INSTRUMENTS
  SCRATCH
  OTHER_SOUNDS
  HI_HATS_AND_CYMBALS
  CLICKS_CLOPS_AND_POPS
}

model Tutorial {
  id            Int            @id @default(autoincrement())
  name          String
  url           String
  beatboxSounds BeatboxSound[]
  TutorialVotes TutorialVote[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  User          User?          @relation(fields: [userId], references: [id])
  userId        String?
}

model ExampleVideo {
  id             Int          @id @default(autoincrement())
  url            String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  BeatboxSound   BeatboxSound @relation(fields: [beatboxSoundId], references: [id], onDelete: Cascade)
  beatboxSoundId Int
}

model TutorialVote {
  id         Int      @id @default(autoincrement())
  tutorial   Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  tutorialId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  voteType   VoteType
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, tutorialId], name: "userId_tutorialId_unique")
}

enum VoteType {
  UP
  DOWN
}
